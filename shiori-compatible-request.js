// Generated by CoffeeScript 1.10.0
(function() {
  var ShioriJK, shiori_compatible_request;

  if (typeof require !== "undefined" && require !== null) {
    ShioriJK = require('shiorijk');
  } else {
    ShioriJK = this.ShioriJK;
  }


  /*
  SHIORI/2.x互換変換
  - GET : Sentence : OnCommunicate はGET Sentence SHIORI/2.3に変換され、ヘッダの位置が変更されます。
  - GET : TEACH : OnTeach はTEACH SHIORI/2.4に変換され、ヘッダの位置が変更されます。
   */

  shiori_compatible_request = function(method, version, id, headers) {
    var ghosts, ghosts_headers, key, request, result, value;
    if (headers == null) {
      headers = {};
    }
    request = new ShioriJK.Message.Request();
    request.request_line.protocol = "SHIORI";
    request.request_line.version = version;
    if (version === '3.0') {
      request.request_line.method = method[0];
      request.headers.header["ID"] = id;
    } else {
      if (method[1] === null) {
        throw new Error("event is not compatible to SHIORI 2.x");
      }
      if (method[1] == null) {
        method[1] = 'Sentence';
      }
      if (method[1] !== 'TEACH') {
        request.request_line.method = method[0] + ' ' + method[1];
      } else {
        request.request_line.method = method[1];
      }
      if (method[1] === 'Sentence' && (id != null)) {
        if (id === "OnCommunicate") {
          request.headers.header["Sender"] = headers["Reference0"];
          request.headers.header["Sentence"] = headers["Reference1"];
          request.headers.header["Age"] = headers.Age || "0";
          for (key in headers) {
            value = headers[key];
            if (result = key.match(/^Reference(\d+)$/)) {
              request.headers.header["Reference" + (result[1] - 2)] = '' + value;
            } else {
              request.headers.header[key] = '' + value;
            }
          }
          headers = null;
        } else {
          headers["Event"] = id;
        }
      } else if (method[1] === 'String' && (id != null)) {
        headers["ID"] = id;
      } else if (method[1] === 'TEACH') {
        request.headers.header["Word"] = headers["Reference0"];
        for (key in headers) {
          value = headers[key];
          if (result = key.match(/^Reference(\d+)$/)) {
            request.headers.header["Reference" + (result[1] - 1)] = '' + value;
          } else {
            request.headers.header[key] = '' + value;
          }
        }
        headers = null;
      } else if (method[1] === 'OwnerGhostName') {
        request.headers.header["Ghost"] = headers["Reference0"];
        headers = null;
      } else if (method[1] === 'OtherGhostName') {
        ghosts = [];
        for (key in headers) {
          value = headers[key];
          if (key.match(/^Reference\d+$/)) {
            ghosts.push('' + value);
          } else {
            request.headers.header[key] = '' + value;
          }
        }
        ghosts_headers = (ghosts.map(function(ghost) {
          return "GhostEx: " + ghost + "\r\n";
        })).join("");
        request = request.request_line + "\r\n" + request.headers + ghosts_headers + "\r\n";
        headers = null;
      }
    }
    if (headers != null) {
      for (key in headers) {
        value = headers[key];
        request.headers.header[key] = '' + value;
      }
    }
    return "" + request;
  };

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = shiori_compatible_request;
  } else {
    this.shiori_compatible_request = shiori_compatible_request;
  }

}).call(this);
